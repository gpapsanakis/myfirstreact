{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\JohnP\\\\myfirstreact\\\\src\\\\App.js\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport * as ReactBootStrap from 'react-bootstrap';\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport { render } from 'react-dom';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nconst App = () => {\n  const [drugs, setDrugs] = useState([]);\n  const [loading, setLoading] = useState(false);\n  var proteinArray = [];\n  var kinase = 0;\n  var otherProteins = 0;\n  var empty = 0;\n  var enzyme = 0;\n  var gpcr = 0;\n  var legendWithValues;\n  var legendWithKinase;\n  var legendWithEnzyme;\n  var legendWithOther;\n  var legendWithGpcr;\n  var legendWithEmpty;\n\n  const getDrugData = async () => {\n    try {\n      const data = await axios.get(\"https://drugtargetcommons.fimm.fi/api/data/bioactivity/?format=json\");\n      console.log(data);\n      let array = data.data['bioactivities'];\n\n      for (let i = 0; i < array.length; i++) {\n        let protein = array[i].protein_class;\n        proteinArray.push(protein);\n      }\n\n      console.log(proteinArray);\n\n      for (let j = 0; j < proteinArray.length; j++) {\n        if (proteinArray[j] === 'Kinase') {\n          kinase++;\n        } else if (proteinArray[j] === 'Enzyme') {\n          enzyme++;\n        } else if (proteinArray[j] === 'Other proteins') {\n          otherProteins++;\n        } else if (proteinArray[j] === 'GPCR') {\n          gpcr++;\n        } else {\n          empty++;\n        }\n      }\n\n      console.log(kinase);\n      console.log(enzyme);\n      console.log(otherProteins);\n      console.log(gpcr);\n      console.log(empty); //legendWithValues = [['Kinase', kinase], ['Enzyme', enzyme], ['Other proteins', otherProteins], ['GPCR', gpcr], ['Empty', empty]];\n\n      legendWithValues = {\n        'Kinase': kinase,\n        'Enzyme': enzyme,\n        'Other proteins': otherProteins,\n        'GPCR': gpcr,\n        'Empty': empty\n      };\n      legendWithKinase = {\n        name: 'Kinase',\n        y: kinase\n      };\n      legendWithEnzyme = {\n        name: 'Enzyme',\n        y: enzyme\n      };\n      legendWithOther = {\n        name: 'Other proteins',\n        y: otherProteins\n      };\n      legendWithGpcr = {\n        name: 'GPCR',\n        y: gpcr\n      };\n      legendWithEmpty = {\n        name: ' Empty',\n        y: empty\n      }; //console.log(legendWithValues);\n\n      const pieOptions = {\n        chart: {\n          type: 'pie'\n        },\n        title: {\n          text: 'My chart'\n        },\n        series: [{\n          data: [legendWithKinase, legendWithEnzyme, legendWithOther, legendWithGpcr, legendWithEmpty]\n        }]\n      };\n      setDrugs(data.data.bioactivities);\n      setLoading(true);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const columns = [{\n    dataField: \"chembl_id\",\n    text: \"Chembl ID\",\n    sort: true\n  }, {\n    dataField: \"activity_comment\",\n    text: \"Activity Comment\",\n    sort: true\n  }, {\n    dataField: \"annotated\",\n    text: \"Annotated\",\n    sort: true\n  }, {\n    dataField: \"annotation_comments\",\n    text: \"Annotation Comments\",\n    sort: true\n  }, {\n    dataField: \"assay_cell_type\",\n    text: \"Assay Cell Type\",\n    sort: true\n  }, {\n    dataField: \"assay_format\",\n    text: \"Assay Format\",\n    sort: true\n  }, {\n    dataField: \"assay_sub_type\",\n    text: \"Assay Sub-Type\",\n    sort: true\n  }, {\n    dataField: \"assay_type\",\n    text: \"Assay Type\",\n    sort: true\n  }, {\n    dataField: \"authors\",\n    text: \"Authors\",\n    sort: true\n  }, {\n    dataField: \"compound_concentration_value\",\n    text: \"Compount Concetration Value\",\n    sort: true\n  }, {\n    dataField: \"compound_concentration_value_unit\",\n    text: \"Compount Concetration Value Unit\",\n    sort: true\n  }, {\n    dataField: \"compound_name\",\n    text: \"Compound Name\",\n    sort: true\n  }, {\n    dataField: \"detection_technology\",\n    text: \"Detection Technology\",\n    sort: true\n  }, {\n    dataField: \"endpoint_actionmode\",\n    text: \"Endpoint Actionmode\",\n    sort: true\n  }, {\n    dataField: \"endpoint_standard_relation\",\n    text: \"Endpoint Standard Relation\",\n    sort: true\n  }, {\n    dataField: \"endpoint_standard_type\",\n    text: \"Endpoint Standard Type\",\n    sort: true\n  }, {\n    dataField: \"endpoint_standard_units\",\n    text: \"Endpoint Standard Units\",\n    sort: true\n  }, {\n    dataField: \"endpoint_standard_value\",\n    text: \"Endpoint Standard Value\",\n    sort: true\n  }, {\n    dataField: \"gene_name\",\n    text: \"Gene Name\",\n    sort: true\n  }, {\n    dataField: \"inhibitor_type\",\n    text: \"Inhibitor Type\",\n    sort: true\n  }, {\n    dataField: \"max_phase\",\n    text: \"Max Phase\",\n    sort: true,\n    filter: textFilter()\n  }, {\n    dataField: \"mutation_info\",\n    text: \"Mutation Info\",\n    sort: true\n  }, {\n    dataField: \"protein_class\",\n    text: \"Protein Class\",\n    sort: true\n  }, {\n    dataField: \"pubmed_id\",\n    text: \"Pubmed ID\",\n    sort: true\n  }, {\n    dataField: \"resource_uri\",\n    text: \"Resource URI\",\n    sort: true\n  }, {\n    dataField: \"target_organism\",\n    text: \"Target Organism\",\n    sort: true\n  }, {\n    dataField: \"target_pref_name\",\n    text: \"Target Pref Name\",\n    sort: true\n  }, {\n    dataField: \"uniprot_id\",\n    text: \"Uniprot ID\",\n    sort: true\n  }, {\n    dataField: \"wildtype_or_mutant\",\n    text: \"Wildtype or Mutant\",\n    sort: true\n  }];\n\n  const customTotal = (from, to, size) => /*#__PURE__*/React.createElement(\"span\", {\n    className: \"react-bootstrap-table-pagination-total\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 3\n    }\n  }, \"Showing \", from, \" to \", to, \" of \", size, \" Results\");\n\n  const options = {\n    showTotal: true,\n    paginationTotalRenderer: customTotal\n  };\n  /* const pieOptions = {\n  \tchart: {\n  \t\ttype: 'pie'\n  \t},\n  \ttitle: {\n  \t\ttext: 'My chart'\n  \t},\n  \tseries: [\n  \t{\n  \t\tdata: [legendWithKinase, legendWithEnzyme, legendWithOther, legendWithGpcr, legendWithEmpty]\n  \t}\n  \t\t]\n  }; */\n\n  useEffect(() => {\n    getDrugData();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 3\n    }\n  }, loading ? /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(HighchartsReact, {\n    highcharts: Highcharts,\n    options: pieOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(BootstrapTable, {\n    keyField: \"activity_comment\",\n    data: drugs,\n    columns: columns,\n    pagination: paginationFactory(options),\n    filter: filterFactory(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 6\n    }\n  })) : /*#__PURE__*/React.createElement(ReactBootStrap.Spinner, {\n    animation: \"border\",\n    variant: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 6\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/JohnP/myfirstreact/src/App.js"],"names":["React","useState","useEffect","Fragment","axios","BootstrapTable","paginationFactory","ReactBootStrap","filterFactory","textFilter","render","Highcharts","HighchartsReact","App","drugs","setDrugs","loading","setLoading","proteinArray","kinase","otherProteins","empty","enzyme","gpcr","legendWithValues","legendWithKinase","legendWithEnzyme","legendWithOther","legendWithGpcr","legendWithEmpty","getDrugData","data","get","console","log","array","i","length","protein","protein_class","push","j","name","y","pieOptions","chart","type","title","text","series","bioactivities","e","columns","dataField","sort","filter","customTotal","from","to","size","options","showTotal","paginationTotalRenderer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport * as ReactBootStrap from 'react-bootstrap';\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport { render } from 'react-dom'\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\n\nconst App = () => {\n\tconst [drugs, setDrugs] = useState([]);\n\tconst [loading, setLoading] = useState(false);\n\n\tvar proteinArray = [];\n\tvar kinase = 0;\n\tvar otherProteins = 0;\n\tvar empty = 0;\n\tvar enzyme = 0;\n\tvar gpcr = 0;\n\tvar legendWithValues;\n\tvar legendWithKinase;\n\tvar legendWithEnzyme;\n\tvar legendWithOther;\n\tvar legendWithGpcr;\n\tvar legendWithEmpty;\n\n\tconst getDrugData = async () => {\n\t\ttry {\n\t\t\tconst data = await axios.get(\n\t\t\t\t\"https://drugtargetcommons.fimm.fi/api/data/bioactivity/?format=json\"\n\t\t\t);\n\t\t\tconsole.log(data);\n\n\t\t\tlet array = data.data['bioactivities']\n\n\t\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\t\tlet protein = array[i].protein_class;\n\t\t\t\tproteinArray.push(protein);\n\t\t\t}\n\t\t\tconsole.log(proteinArray);\n\n\t\t\tfor (let j = 0; j < proteinArray.length; j++) {\n\t\t\t\tif (proteinArray[j] === 'Kinase') {\n\t\t\t\t\tkinase++;\n\t\t\t\t} else if (proteinArray[j] === 'Enzyme') {\n\t\t\t\t\tenzyme++;\n\t\t\t\t} else if (proteinArray[j] === 'Other proteins') {\n\t\t\t\t\totherProteins++;\n\t\t\t\t} else if (proteinArray[j] === 'GPCR') {\n\t\t\t\t\tgpcr++;\n\t\t\t\t} else {\n\t\t\t\t\tempty++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(kinase);\n\t\t\tconsole.log(enzyme);\n\t\t\tconsole.log(otherProteins);\n\t\t\tconsole.log(gpcr);\n\t\t\tconsole.log(empty);\n\t\t\t//legendWithValues = [['Kinase', kinase], ['Enzyme', enzyme], ['Other proteins', otherProteins], ['GPCR', gpcr], ['Empty', empty]];\n\t\t\tlegendWithValues = { 'Kinase': kinase, 'Enzyme': enzyme, 'Other proteins': otherProteins, 'GPCR': gpcr, 'Empty': empty };\n\t\t\tlegendWithKinase = {\n\t\t\t\tname: 'Kinase',\n\t\t\t\ty: kinase\n\t\t\t};\n\t\t\tlegendWithEnzyme = {\n\t\t\t\tname: 'Enzyme',\n\t\t\t\ty: enzyme\n\t\t\t};\n\t\t\tlegendWithOther = {\n\t\t\t\tname: 'Other proteins',\n\t\t\t\ty: otherProteins\n\t\t\t};\n\t\t\tlegendWithGpcr = {\n\t\t\t\tname: 'GPCR',\n\t\t\t\ty: gpcr\n\t\t\t};\n\t\t\tlegendWithEmpty = {\n\t\t\t\tname: ' Empty',\n\t\t\t\ty: empty\n\t\t\t};\n\t\t\t//console.log(legendWithValues);\n\n\t\t\tconst pieOptions = {\n\t\t\t\tchart: {\n\t\t\t\t\ttype: 'pie'\n\t\t\t\t},\n\t\t\t\ttitle: {\n\t\t\t\t\ttext: 'My chart'\n\t\t\t\t},\n\t\t\t\tseries: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdata: [legendWithKinase, legendWithEnzyme, legendWithOther, legendWithGpcr, legendWithEmpty]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tsetDrugs(data.data.bioactivities);\n\t\t\tsetLoading(true);\n\t\t} catch (e) {\n\t\t\tconsole.log(e)\n\t\t}\n\t};\n\n\tconst columns = [\n\t\t{ dataField: \"chembl_id\", text: \"Chembl ID\", sort: true },\n\t\t{ dataField: \"activity_comment\", text: \"Activity Comment\", sort: true },\n\t\t{ dataField: \"annotated\", text: \"Annotated\", sort: true },\n\t\t{ dataField: \"annotation_comments\", text: \"Annotation Comments\", sort: true },\n\t\t{ dataField: \"assay_cell_type\", text: \"Assay Cell Type\", sort: true },\n\t\t{ dataField: \"assay_format\", text: \"Assay Format\", sort: true },\n\t\t{ dataField: \"assay_sub_type\", text: \"Assay Sub-Type\", sort: true },\n\t\t{ dataField: \"assay_type\", text: \"Assay Type\", sort: true },\n\t\t{ dataField: \"authors\", text: \"Authors\", sort: true },\n\t\t{ dataField: \"compound_concentration_value\", text: \"Compount Concetration Value\", sort: true },\n\t\t{ dataField: \"compound_concentration_value_unit\", text: \"Compount Concetration Value Unit\", sort: true },\n\t\t{ dataField: \"compound_name\", text: \"Compound Name\", sort: true },\n\t\t{ dataField: \"detection_technology\", text: \"Detection Technology\", sort: true },\n\t\t{ dataField: \"endpoint_actionmode\", text: \"Endpoint Actionmode\", sort: true },\n\t\t{ dataField: \"endpoint_standard_relation\", text: \"Endpoint Standard Relation\", sort: true },\n\t\t{ dataField: \"endpoint_standard_type\", text: \"Endpoint Standard Type\", sort: true },\n\t\t{ dataField: \"endpoint_standard_units\", text: \"Endpoint Standard Units\", sort: true },\n\t\t{ dataField: \"endpoint_standard_value\", text: \"Endpoint Standard Value\", sort: true },\n\t\t{ dataField: \"gene_name\", text: \"Gene Name\", sort: true },\n\t\t{ dataField: \"inhibitor_type\", text: \"Inhibitor Type\", sort: true },\n\t\t{ dataField: \"max_phase\", text: \"Max Phase\", sort: true, filter: textFilter() },\n\t\t{ dataField: \"mutation_info\", text: \"Mutation Info\", sort: true },\n\t\t{ dataField: \"protein_class\", text: \"Protein Class\", sort: true },\n\t\t{ dataField: \"pubmed_id\", text: \"Pubmed ID\", sort: true },\n\t\t{ dataField: \"resource_uri\", text: \"Resource URI\", sort: true },\n\t\t{ dataField: \"target_organism\", text: \"Target Organism\", sort: true },\n\t\t{ dataField: \"target_pref_name\", text: \"Target Pref Name\", sort: true },\n\t\t{ dataField: \"uniprot_id\", text: \"Uniprot ID\", sort: true },\n\t\t{ dataField: \"wildtype_or_mutant\", text: \"Wildtype or Mutant\", sort: true }\n\t]\n\n\tconst customTotal = (from, to, size) => (\n\t\t<span className=\"react-bootstrap-table-pagination-total\">\n\t\t\tShowing { from} to { to} of { size} Results\n\t\t</span>\n\t);\n\n\tconst options = {\n\t\tshowTotal: true,\n\t\tpaginationTotalRenderer: customTotal\n\t};\n\n\t/* const pieOptions = {\n\t\tchart: {\n\t\t\ttype: 'pie'\n\t\t},\n\t\ttitle: {\n\t\t\ttext: 'My chart'\n\t\t},\n\t\tseries: [\n\t\t{\n\t\t\tdata: [legendWithKinase, legendWithEnzyme, legendWithOther, legendWithGpcr, legendWithEmpty]\n\t\t}\n\t\t\t]\n\t}; */\n\n\tuseEffect(() => {\n\t\tgetDrugData();\n\t}, []);\n\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{loading ? (\n\t\t\t\t<Fragment>\n\t\t\t\t\t<HighchartsReact highcharts={Highcharts} options={pieOptions} />\n\t\t\t\t\t<BootstrapTable\n\t\t\t\t\t\tkeyField=\"activity_comment\"\n\t\t\t\t\t\tdata={drugs}\n\t\t\t\t\t\tcolumns={columns}\n\t\t\t\t\t\tpagination={paginationFactory(options)}\n\t\t\t\t\t\tfilter={filterFactory()}\n\t\t\t\t\t/>\n\t\t\t\t</Fragment>\n\n\t\t\t) : (\n\t\t\t\t\t<ReactBootStrap.Spinner animation=\"border\" variant=\"primary\" />\n\t\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
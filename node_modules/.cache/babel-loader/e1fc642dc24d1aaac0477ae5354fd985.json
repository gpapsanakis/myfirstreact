{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\JohnP\\\\myfirstreact\\\\src\\\\App.js\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport * as ReactBootStrap from 'react-bootstrap';\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport { render } from 'react-dom';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nconst App = () => {\n  const [drugs, setDrugs] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const getDrugData = async () => {\n    try {\n      const data = await axios.get(\"https://drugtargetcommons.fimm.fi/api/data/bioactivity/?format=json\");\n      console.log(data);\n      const map = data.data.bioactivities; //const result = Object.values(map);\n\n      let arrayx = data.data['bioactivities'];\n      /* for (i = 0; i <  */\n\n      console.log(arrayx[19]);\n      let arrayy = arrayx.slice(19);\n      console.log(arrayy);\n      let arrayz = arrayy.find(8);\n      console.log(arrayz);\n      setDrugs(data.data.bioactivities);\n      setLoading(true);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const columns = [{\n    dataField: \"chembl_id\",\n    text: \"Chembl ID\",\n    sort: true\n  }, {\n    dataField: \"activity_comment\",\n    text: \"Activity Comment\",\n    sort: true\n  }, {\n    dataField: \"annotated\",\n    text: \"Annotated\",\n    sort: true\n  }, {\n    dataField: \"annotation_comments\",\n    text: \"Annotation Comments\",\n    sort: true\n  }, {\n    dataField: \"assay_cell_type\",\n    text: \"Assay Cell Type\",\n    sort: true\n  }, {\n    dataField: \"assay_format\",\n    text: \"Assay Format\",\n    sort: true\n  }, {\n    dataField: \"assay_sub_type\",\n    text: \"Assay Sub-Type\",\n    sort: true\n  }, {\n    dataField: \"assay_type\",\n    text: \"Assay Type\",\n    sort: true\n  }, {\n    dataField: \"authors\",\n    text: \"Authors\",\n    sort: true\n  }, {\n    dataField: \"compound_concentration_value\",\n    text: \"Compount Concetration Value\",\n    sort: true\n  }, {\n    dataField: \"compound_concentration_value_unit\",\n    text: \"Compount Concetration Value Unit\",\n    sort: true\n  }, {\n    dataField: \"compound_name\",\n    text: \"Compound Name\",\n    sort: true\n  }, {\n    dataField: \"detection_technology\",\n    text: \"Detection Technology\",\n    sort: true\n  }, {\n    dataField: \"endpoint_actionmode\",\n    text: \"Endpoint Actionmode\",\n    sort: true\n  }, {\n    dataField: \"endpoint_standard_relation\",\n    text: \"Endpoint Standard Relation\",\n    sort: true\n  }, {\n    dataField: \"endpoint_standard_type\",\n    text: \"Endpoint Standard Type\",\n    sort: true\n  }, {\n    dataField: \"endpoint_standard_units\",\n    text: \"Endpoint Standard Units\",\n    sort: true\n  }, {\n    dataField: \"endpoint_standard_value\",\n    text: \"Endpoint Standard Value\",\n    sort: true\n  }, {\n    dataField: \"gene_name\",\n    text: \"Gene Name\",\n    sort: true\n  }, {\n    dataField: \"inhibitor_type\",\n    text: \"Inhibitor Type\",\n    sort: true\n  }, {\n    dataField: \"max_phase\",\n    text: \"Max Phase\",\n    sort: true,\n    filter: textFilter()\n  }, {\n    dataField: \"mutation_info\",\n    text: \"Mutation Info\",\n    sort: true\n  }, {\n    dataField: \"protein_class\",\n    text: \"Protein Class\",\n    sort: true\n  }, {\n    dataField: \"pubmed_id\",\n    text: \"Pubmed ID\",\n    sort: true\n  }, {\n    dataField: \"resource_uri\",\n    text: \"Resource URI\",\n    sort: true\n  }, {\n    dataField: \"target_organism\",\n    text: \"Target Organism\",\n    sort: true\n  }, {\n    dataField: \"target_pref_name\",\n    text: \"Target Pref Name\",\n    sort: true\n  }, {\n    dataField: \"uniprot_id\",\n    text: \"Uniprot ID\",\n    sort: true\n  }, {\n    dataField: \"wildtype_or_mutant\",\n    text: \"Wildtype or Mutant\",\n    sort: true\n  }];\n\n  const customTotal = (from, to, size) => /*#__PURE__*/React.createElement(\"span\", {\n    className: \"react-bootstrap-table-pagination-total\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 3\n    }\n  }, \"Showing \", from, \" to \", to, \" of \", size, \" Results\");\n\n  const options = {\n    showTotal: true,\n    paginationTotalRenderer: customTotal\n  };\n  useEffect(() => {\n    getDrugData();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 3\n    }\n  }, loading ? /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(HighchartsReact, {\n    highcharts: Highcharts,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(BootstrapTable, {\n    keyField: \"activity_comment\",\n    data: drugs,\n    columns: columns,\n    pagination: paginationFactory(options),\n    filter: filterFactory(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  })) : /*#__PURE__*/React.createElement(ReactBootStrap.Spinner, {\n    animation: \"border\",\n    variant: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 4\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/JohnP/myfirstreact/src/App.js"],"names":["React","useState","useEffect","Fragment","axios","BootstrapTable","paginationFactory","ReactBootStrap","filterFactory","textFilter","render","Highcharts","HighchartsReact","App","drugs","setDrugs","loading","setLoading","getDrugData","data","get","console","log","map","bioactivities","arrayx","arrayy","slice","arrayz","find","e","columns","dataField","text","sort","filter","customTotal","from","to","size","options","showTotal","paginationTotalRenderer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport * as ReactBootStrap from 'react-bootstrap';\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport { render } from 'react-dom'\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\n\nconst App = () => {\n\tconst [drugs, setDrugs] = useState([]);\n\tconst [loading, setLoading] = useState(false);\n\tconst getDrugData = async () => {\n\t\ttry {\n\t\t\tconst data = await axios.get(\n\t\t\t\t\"https://drugtargetcommons.fimm.fi/api/data/bioactivity/?format=json\"\n\t\t\t);\n\t\t\tconsole.log(data);\n\t\t\t\n\t\t\tconst map = data.data.bioactivities;\n\n\t\t\t//const result = Object.values(map);\n\t\t\tlet arrayx = data.data['bioactivities']\n\t\t\t/* for (i = 0; i <  */ \n\t\t\tconsole.log(arrayx[19]);\n\t\t\tlet arrayy = arrayx.slice(19);\n\t\t\tconsole.log(arrayy);\n\t\t\tlet arrayz = arrayy.find(8);\n\t\t    console.log(arrayz);\n\t\t\t\n\t\t\tsetDrugs(data.data.bioactivities);\n\t\t\tsetLoading(true);\n\t\t} catch (e) {\n\t\t\tconsole.log(e)\n\t\t}\n\t};\n\t\n\tconst columns = [\n\t\t{ dataField: \"chembl_id\", text: \"Chembl ID\", sort: true },\n\t\t{ dataField: \"activity_comment\", text: \"Activity Comment\", sort: true },\n\t\t{ dataField: \"annotated\", text: \"Annotated\", sort: true },\n\t\t{ dataField: \"annotation_comments\", text: \"Annotation Comments\", sort: true },\n\t\t{ dataField: \"assay_cell_type\", text: \"Assay Cell Type\", sort: true },\n\t\t{ dataField: \"assay_format\", text: \"Assay Format\", sort: true },\n\t\t{ dataField: \"assay_sub_type\", text: \"Assay Sub-Type\", sort: true },\n\t\t{ dataField: \"assay_type\", text: \"Assay Type\", sort: true },\n\t\t{ dataField: \"authors\", text: \"Authors\", sort: true },\n\t\t{ dataField: \"compound_concentration_value\", text: \"Compount Concetration Value\", sort: true },\n\t\t{ dataField: \"compound_concentration_value_unit\", text: \"Compount Concetration Value Unit\", sort: true },\n\t\t{ dataField: \"compound_name\", text: \"Compound Name\", sort: true },\n\t\t{ dataField: \"detection_technology\", text: \"Detection Technology\", sort: true },\n\t\t{ dataField: \"endpoint_actionmode\", text: \"Endpoint Actionmode\", sort: true },\n\t\t{ dataField: \"endpoint_standard_relation\", text: \"Endpoint Standard Relation\", sort: true },\n\t\t{ dataField: \"endpoint_standard_type\", text: \"Endpoint Standard Type\", sort: true },\n\t\t{ dataField: \"endpoint_standard_units\", text: \"Endpoint Standard Units\", sort: true },\n\t\t{ dataField: \"endpoint_standard_value\", text: \"Endpoint Standard Value\", sort: true },\n\t\t{ dataField: \"gene_name\", text: \"Gene Name\", sort: true },\n\t\t{ dataField: \"inhibitor_type\", text: \"Inhibitor Type\", sort: true },\n\t\t{ dataField: \"max_phase\", text: \"Max Phase\", sort: true, filter: textFilter() },\n\t\t{ dataField: \"mutation_info\", text: \"Mutation Info\", sort: true },\n\t\t{ dataField: \"protein_class\", text: \"Protein Class\", sort: true },\n\t\t{ dataField: \"pubmed_id\", text: \"Pubmed ID\", sort: true },\n\t\t{ dataField: \"resource_uri\", text: \"Resource URI\", sort: true },\n\t\t{ dataField: \"target_organism\", text: \"Target Organism\", sort: true },\n\t\t{ dataField: \"target_pref_name\", text: \"Target Pref Name\", sort: true },\n\t\t{ dataField: \"uniprot_id\", text: \"Uniprot ID\", sort: true },\n\t\t{ dataField: \"wildtype_or_mutant\", text: \"Wildtype or Mutant\", sort: true }\n\t]\n\t\n\tconst customTotal = (from, to, size) => (\n\t\t<span className=\"react-bootstrap-table-pagination-total\">\n\t\t\tShowing { from } to { to } of { size } Results\n\t\t</span>\n\t);\n\t\n\tconst options = {\n\t\tshowTotal: true,\n\t\tpaginationTotalRenderer: customTotal\n\t};\n\n\tuseEffect(() => {\n\t\tgetDrugData();\n\t}, []);\n\t\n\n\treturn (\n\t\t<div className = \"App\">\n\t\t{loading ? (\n\t\t\t<Fragment>\n\t\t\t\t<HighchartsReact highcharts={Highcharts} options={options} />\n\t\t\t\t<BootstrapTable\n\t\t\t\t\tkeyField=\"activity_comment\"\n\t\t\t\t\tdata={drugs}\n\t\t\t\t\tcolumns={columns}\n\t\t\t\t\tpagination={paginationFactory(options)}\n\t\t\t\t\tfilter={ filterFactory() }\n\t\t\t\t/>\n\t\t\t</Fragment>\n\t\t\t\n\t\t) : (\n\t\t\t<ReactBootStrap.Spinner animation=\"border\" variant=\"primary\" />\n\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}